entity Product {
    name String maxlength(200) required
    price Float min(0) required
    description String maxlength(5000)
    isActive Boolean
    numberOfBatteries Integer min(0) max(10)
}

entity Image {
    data ImageBlob required
}

entity Tag {
	name String required
}

entity Customer {
	street String
    city String
    zipCode Integer min(1000) max(9999)
    province String
    phoneNumber String
}

entity ProductOrder{
	created ZonedDateTime
    updated ZonedDateTime
    state OrderState
    deliveryType DeliveryType
    includeBatteries Boolean
    description String maxlength(5000)
    deliveryPrice Float min(0)
}

entity Location{
	latitude Float required min(-90) max(90)
    longitude Float required min(-180) max(180)
    description String
}

entity Workshop{
	name String required maxlength(255)
    description String maxlength(5000)
    neededMaterials String maxlength(5000)
    includedInPrice String maxlength(5000)
    durationInMinutes Integer required
    price Float min(0)
    maxSubscriptions Integer 
    isActive Boolean
    showOnHomepage Boolean
}

entity WorkshopDate{
	date ZonedDateTime required
}

entity WorkshopSubscription{
    created ZonedDateTime
    state SubscriptionState
}

enum OrderState{
	NEW, PAYED, CANCELLED, DONE
}

enum SubscriptionState{
	NEW, PAYED, CANCELLED
}

enum DeliveryType{
	DELIVERED, PICKUP
}

relationship OneToMany{
	Workshop{dates} to WorkshopDate{workshop(name)}
}

relationship OneToMany{
	WorkshopDate{subscriptions} to WorkshopSubscription{workshop(date)}
}

relationship OneToOne{
	ProductOrder{deliveryAddress} to Location
}

relationship OneToOne{
	Customer{address} to Location
}

relationship ManyToMany{
	Workshop{tags(name)} to Tag{workshops(name)}
}

relationship ManyToMany {
	Product{tags(name)} to Tag{products(name)}
}

relationship OneToMany{
	Workshop{images} to Image{workshop(name)}
}

relationship OneToMany{
	Product{images} to Image{product(name)}
}

relationship OneToMany{
	Customer{orders} to ProductOrder
}

relationship OneToMany{
	Product{orders} to ProductOrder{product(name) required}
}


dto * with mapstruct

service ProductOrder with serviceClass
service Product with serviceClass
